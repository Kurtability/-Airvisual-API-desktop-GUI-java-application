/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SCD2_2021_Exam;

import model.InputFacade;
import model.ModelFacade;
import model.ModelFacadeImpl;
import model.OutputFacade;
import org.junit.Assert;
import org.junit.Test;
import presenter.JsonParser;

import java.io.IOException;
import java.util.ArrayList;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ModelFacadeTest {

    @Test
    public void listSupportedCountriesTest_success() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockResponse = "success";

        when(inputFacade.Input_listSupportedCountries()).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.Input_listSupportedCountries(),mockResponse);
        verify(inputFacade).Input_listSupportedCountries();
    }

    @Test
    public void listSupportedStatesFromChosenCountryTest_success() throws IOException, InterruptedException{
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockCountry = "China";
        String mockResponse = "success";

        when(inputFacade.Input_listSupportedStatesFromChosenCountry(mockCountry)).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.Input_listSupportedStatesFromChosenCountry(mockCountry),mockResponse);
        verify(inputFacade).Input_listSupportedStatesFromChosenCountry(mockCountry);
    }

    @Test
    public void listSupportedCitiesFromChosenStateTest_success() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockState = "Beijing";
        String mockCountry = "China";
        String mockResponse = "success";

        when(inputFacade.Input_listSupportedCitiesFromChosenState(mockState,mockCountry)).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.Input_listSupportedCitiesFromChosenState(mockState,mockCountry),mockResponse);
        verify(inputFacade).Input_listSupportedCitiesFromChosenState(mockState,mockCountry);
    }

    @Test
    public void listSpecifiedCityDataFromChosenStateTest_success() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockCity = "Beijing";
        String mockState = "Beijing";
        String mockCountry = "China";
        String mockResponse = "success";

        when(inputFacade.Input_listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry)).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.Input_listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry),mockResponse);
        verify(inputFacade).Input_listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry);
    }



    //test output api
    @Test
    public void Output_sendSMS(){

    }





    //test JsonParser
    @Test
    public void JsonParser1Test(){
        //white box testing, no mock
        String expectedOutput = "[Afghanistan, Algeria, Andorra, Angola, Argentina, Armenia, Australia, Austria, Bahamas, Bahrain, Bangladesh, Belgium, Bolivia, Bosnia Herzegovina, Brazil, Brunei, Bulgaria, Canada, Chile, China, Colombia, Croatia, Cyprus, Czech Republic, Democratic Republic of the Congo, Denmark, Ecuador, Ethiopia, Finland, France, Germany, Ghana, Guatemala, Hong Kong SAR, Hungary, India, Indonesia, Iran, Iraq, Ireland, Israel, Italy, Ivory Coast, Japan, Jordan, Kazakhstan, Kosovo, Kuwait, Kyrgyzstan, Latvia, Lithuania, Luxembourg, Macao SAR, Malaysia, Malta, Mexico, Mongolia, Myanmar, Nepal, Netherlands, New Caledonia, New Zealand, Nigeria, North Macedonia, Norway, Oman, Pakistan, Palestinian Territory, Peru, Philippines, Poland, Portugal, Puerto Rico, Romania, Russia, San Marino, Serbia, Singapore, Slovakia, Slovenia, South Africa, South Korea, Spain, Sri Lanka, Svalbard and Jan Mayen, Sweden, Switzerland, Syria, Taiwan, Thailand, Turkey, U.S. Virgin Islands, USA, Uganda, Ukraine, United Arab Emirates, United Kingdom, Uzbekistan, Vietnam, Yemen]";

        //raw json
        String toBeParsed = "{\"status\":\"success\",\"data\":[{\"country\":\"Afghanistan\"}," +
                "{\"country\":\"Algeria\"},{\"country\":\"Andorra\"},{\"country\":\"Angola\"}," +
                "{\"country\":\"Argentina\"},{\"country\":\"Armenia\"},{\"country\":\"Australia\"}," +
                "{\"country\":\"Austria\"},{\"country\":\"Bahamas\"},{\"country\":\"Bahrain\"}," +
                "{\"country\":\"Bangladesh\"},{\"country\":\"Belgium\"},{\"country\":\"Bolivia\"}," +
                "{\"country\":\"Bosnia Herzegovina\"},{\"country\":\"Brazil\"},{\"country\":\"Brunei\"}," +
                "{\"country\":\"Bulgaria\"},{\"country\":\"Canada\"},{\"country\":\"Chile\"}," +
                "{\"country\":\"China\"},{\"country\":\"Colombia\"},{\"country\":\"Croatia\"}," +
                "{\"country\":\"Cyprus\"},{\"country\":\"Czech Republic\"}," +
                "{\"country\":\"Democratic Republic of the Congo\"},{\"country\":\"Denmark\"}," +
                "{\"country\":\"Ecuador\"},{\"country\":\"Ethiopia\"},{\"country\":\"Finland\"}," +
                "{\"country\":\"France\"},{\"country\":\"Germany\"},{\"country\":\"Ghana\"}," +
                "{\"country\":\"Guatemala\"},{\"country\":\"Hong Kong SAR\"},{\"country\":\"Hungary\"}," +
                "{\"country\":\"India\"},{\"country\":\"Indonesia\"},{\"country\":\"Iran\"}," +
                "{\"country\":\"Iraq\"},{\"country\":\"Ireland\"},{\"country\":\"Israel\"}," +
                "{\"country\":\"Italy\"},{\"country\":\"Ivory Coast\"},{\"country\":\"Japan\"}," +
                "{\"country\":\"Jordan\"},{\"country\":\"Kazakhstan\"},{\"country\":\"Kosovo\"}," +
                "{\"country\":\"Kuwait\"},{\"country\":\"Kyrgyzstan\"},{\"country\":\"Latvia\"}," +
                "{\"country\":\"Lithuania\"},{\"country\":\"Luxembourg\"},{\"country\":\"Macao SAR\"}," +
                "{\"country\":\"Malaysia\"},{\"country\":\"Malta\"},{\"country\":\"Mexico\"}," +
                "{\"country\":\"Mongolia\"},{\"country\":\"Myanmar\"},{\"country\":\"Nepal\"}," +
                "{\"country\":\"Netherlands\"},{\"country\":\"New Caledonia\"}," +
                "{\"country\":\"New Zealand\"},{\"country\":\"Nigeria\"}," +
                "{\"country\":\"North Macedonia\"},{\"country\":\"Norway\"}," +
                "{\"country\":\"Oman\"},{\"country\":\"Pakistan\"}," +
                "{\"country\":\"Palestinian Territory\"}," +
                "{\"country\":\"Peru\"},{\"country\":\"Philippines\"},{\"country\":\"Poland\"}," +
                "{\"country\":\"Portugal\"},{\"country\":\"Puerto Rico\"},{\"country\":\"Romania\"}" +
                ",{\"country\":\"Russia\"},{\"country\":\"San Marino\"},{\"country\":\"Serbia\"}," +
                "{\"country\":\"Singapore\"},{\"country\":\"Slovakia\"},{\"country\":\"Slovenia\"}," +
                "{\"country\":\"South Africa\"},{\"country\":\"South Korea\"},{\"country\":\"Spain\"}," +
                "{\"country\":\"Sri Lanka\"},{\"country\":\"Svalbard and Jan Mayen\"},{\"country\":\"Sweden\"}," +
                "{\"country\":\"Switzerland\"},{\"country\":\"Syria\"},{\"country\":\"Taiwan\"}," +
                "{\"country\":\"Thailand\"},{\"country\":\"Turkey\"},{\"country\":\"U.S. Virgin Islands\"}," +
                "{\"country\":\"USA\"},{\"country\":\"Uganda\"},{\"country\":\"Ukraine\"}," +
                "{\"country\":\"United Arab Emirates\"},{\"country\":\"United Kingdom\"},{\"country\":\"Uzbekistan\"}," +
                "{\"country\":\"Vietnam\"},{\"country\":\"Yemen\"}]}";
        ArrayList<String> actualOutput = JsonParser.parseSupportedCountries(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());
    }

    @Test
    public void JsonParser2Test(){
        String expectedOutput = "[Anhui, Beijing, Chongqing, Fujian, Gansu, Guangdong, Guangxi, Guizhou, Hainan, Hebei, Heilongjiang, Henan, Hubei, Hunan, Inner Mongolia, Jiangsu, Jiangxi, Jilin, Liaoning, Ningxia, Qinghai, Shaanxi, Shandong, Shanghai, Shanxi, Sichuan, Tianjin, Tibet, Xinjiang, Yunnan, Zhejiang]";

        String toBeParsed = "{\"status\":\"success\",\"data\":[{\"state\":\"Anhui\"},{\"state\":\"Beijing\"},{\"state\":\"Chongqing\"},{\"state\":\"Fujian\"},{\"state\":\"Gansu\"},{\"state\":\"Guangdong\"},{\"state\":\"Guangxi\"},{\"state\":\"Guizhou\"},{\"state\":\"Hainan\"},{\"state\":\"Hebei\"},{\"state\":\"Heilongjiang\"},{\"state\":\"Henan\"},{\"state\":\"Hubei\"},{\"state\":\"Hunan\"},{\"state\":\"Inner Mongolia\"},{\"state\":\"Jiangsu\"},{\"state\":\"Jiangxi\"},{\"state\":\"Jilin\"},{\"state\":\"Liaoning\"},{\"state\":\"Ningxia\"},{\"state\":\"Qinghai\"},{\"state\":\"Shaanxi\"},{\"state\":\"Shandong\"},{\"state\":\"Shanghai\"},{\"state\":\"Shanxi\"},{\"state\":\"Sichuan\"},{\"state\":\"Tianjin\"},{\"state\":\"Tibet\"},{\"state\":\"Xinjiang\"},{\"state\":\"Yunnan\"},{\"state\":\"Zhejiang\"}]}";

        ArrayList<String> actualOutput = JsonParser.parseSupportedStates(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());

    }

    @Test
    public void JsonParser3Test(){
        String expectedOutput = "[Beijing, Changping, Daxing, Fangshan, Liangxiang, Mentougou, Shunyi, Tongzhou]";

        String toBeParsed = "{\"status\":\"success\",\"data\":[{\"city\":\"Beijing\"},{\"city\":\"Changping\"},{\"city\":\"Daxing\"},{\"city\":\"Fangshan\"},{\"city\":\"Liangxiang\"},{\"city\":\"Mentougou\"},{\"city\":\"Shunyi\"},{\"city\":\"Tongzhou\"}]}";

        ArrayList<String> actualOutput = JsonParser.parseSupportedCities(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());
    }

}

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SCD2_2021_Exam;

import model.InputFacade;
import model.ModelFacade;
import model.ModelFacadeImpl;
import model.OutputFacade;
import model.database.Database;
import org.junit.Assert;
import org.junit.Test;
import parser.JsonParser;

import java.io.IOException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedHashMap;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class ModelFacadeTest {

    // test input api
    @Test
    public void listSupportedCountriesTest() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockResponse = "success";

        when(inputFacade.listSupportedCountries()).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.listSupportedCountries(),mockResponse);
        verify(inputFacade).listSupportedCountries();
    }

    @Test
    public void listSupportedStatesFromChosenCountryTest() throws IOException, InterruptedException{
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockCountry = "China";
        String mockResponse = "success";

        when(inputFacade.listSupportedStatesFromChosenCountry(mockCountry)).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.listSupportedStatesFromChosenCountry(mockCountry),mockResponse);
        verify(inputFacade).listSupportedStatesFromChosenCountry(mockCountry);
    }

    @Test
    public void listSupportedCitiesFromChosenStateTest() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockState = "Beijing";
        String mockCountry = "China";
        String mockResponse = "success";

        when(inputFacade.listSupportedCitiesFromChosenState(mockState,mockCountry)).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.listSupportedCitiesFromChosenState(mockState,mockCountry),mockResponse);
        verify(inputFacade).listSupportedCitiesFromChosenState(mockState,mockCountry);
    }

    @Test
    public void listSpecifiedCityDataFromChosenStateTest() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockCity = "Beijing";
        String mockState = "Beijing";
        String mockCountry = "China";
        String mockResponse = "success";

        when(inputFacade.listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry)).thenReturn(mockResponse);


        // test how my model handles the return
        assertEquals(model.listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry),mockResponse);
        verify(inputFacade).listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry);
    }



    //test output api
    @Test
    public void SendSMSTest() throws IOException, InterruptedException {
        // make a mock of the returned input api for this specific function

        InputFacade inputFacade = mock(InputFacade.class);
        OutputFacade outputFacade = mock(OutputFacade.class);

        ModelFacade model = new ModelFacadeImpl(inputFacade,outputFacade);

        String mockOutputResponse = "You have send your report successfully!";
        String mockCity = "Beijing";
        String mockState = "Beijing";
        String mockCountry = "China";
        String mockResponse = "success";
        when(inputFacade.listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry)).thenReturn(mockResponse);

        when(outputFacade.sendSMS(mockResponse)).thenReturn(mockOutputResponse);


        // test how my model handles the return
        assertEquals(model.listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry),mockResponse);
        verify(inputFacade).listSpecifiedCityDataFromChosenState(mockCity,mockState,mockCountry);

        assertEquals(model.sendSMS(mockResponse),mockOutputResponse);
        verify(outputFacade).sendSMS(mockResponse);
    }





    //test JsonParser
    @Test
    public void JsonParserFunction1Test(){
        //white box testing, no mock
        String expectedOutput = "[Afghanistan, Algeria, Andorra, Angola, Argentina, Armenia, Australia, Austria, Bahamas, Bahrain, Bangladesh, Belgium, Bolivia, Bosnia Herzegovina, Brazil, Brunei, Bulgaria, Canada, Chile, China, Colombia, Croatia, Cyprus, Czech Republic, Democratic Republic of the Congo, Denmark, Ecuador, Ethiopia, Finland, France, Germany, Ghana, Guatemala, Hong Kong SAR, Hungary, India, Indonesia, Iran, Iraq, Ireland, Israel, Italy, Ivory Coast, Japan, Jordan, Kazakhstan, Kosovo, Kuwait, Kyrgyzstan, Latvia, Lithuania, Luxembourg, Macao SAR, Malaysia, Malta, Mexico, Mongolia, Myanmar, Nepal, Netherlands, New Caledonia, New Zealand, Nigeria, North Macedonia, Norway, Oman, Pakistan, Palestinian Territory, Peru, Philippines, Poland, Portugal, Puerto Rico, Romania, Russia, San Marino, Serbia, Singapore, Slovakia, Slovenia, South Africa, South Korea, Spain, Sri Lanka, Svalbard and Jan Mayen, Sweden, Switzerland, Syria, Taiwan, Thailand, Turkey, U.S. Virgin Islands, USA, Uganda, Ukraine, United Arab Emirates, United Kingdom, Uzbekistan, Vietnam, Yemen]";

        //raw json
        String toBeParsed = "{\"status\":\"success\",\"data\":[{\"country\":\"Afghanistan\"}," +
                "{\"country\":\"Algeria\"},{\"country\":\"Andorra\"},{\"country\":\"Angola\"}," +
                "{\"country\":\"Argentina\"},{\"country\":\"Armenia\"},{\"country\":\"Australia\"}," +
                "{\"country\":\"Austria\"},{\"country\":\"Bahamas\"},{\"country\":\"Bahrain\"}," +
                "{\"country\":\"Bangladesh\"},{\"country\":\"Belgium\"},{\"country\":\"Bolivia\"}," +
                "{\"country\":\"Bosnia Herzegovina\"},{\"country\":\"Brazil\"},{\"country\":\"Brunei\"}," +
                "{\"country\":\"Bulgaria\"},{\"country\":\"Canada\"},{\"country\":\"Chile\"}," +
                "{\"country\":\"China\"},{\"country\":\"Colombia\"},{\"country\":\"Croatia\"}," +
                "{\"country\":\"Cyprus\"},{\"country\":\"Czech Republic\"}," +
                "{\"country\":\"Democratic Republic of the Congo\"},{\"country\":\"Denmark\"}," +
                "{\"country\":\"Ecuador\"},{\"country\":\"Ethiopia\"},{\"country\":\"Finland\"}," +
                "{\"country\":\"France\"},{\"country\":\"Germany\"},{\"country\":\"Ghana\"}," +
                "{\"country\":\"Guatemala\"},{\"country\":\"Hong Kong SAR\"},{\"country\":\"Hungary\"}," +
                "{\"country\":\"India\"},{\"country\":\"Indonesia\"},{\"country\":\"Iran\"}," +
                "{\"country\":\"Iraq\"},{\"country\":\"Ireland\"},{\"country\":\"Israel\"}," +
                "{\"country\":\"Italy\"},{\"country\":\"Ivory Coast\"},{\"country\":\"Japan\"}," +
                "{\"country\":\"Jordan\"},{\"country\":\"Kazakhstan\"},{\"country\":\"Kosovo\"}," +
                "{\"country\":\"Kuwait\"},{\"country\":\"Kyrgyzstan\"},{\"country\":\"Latvia\"}," +
                "{\"country\":\"Lithuania\"},{\"country\":\"Luxembourg\"},{\"country\":\"Macao SAR\"}," +
                "{\"country\":\"Malaysia\"},{\"country\":\"Malta\"},{\"country\":\"Mexico\"}," +
                "{\"country\":\"Mongolia\"},{\"country\":\"Myanmar\"},{\"country\":\"Nepal\"}," +
                "{\"country\":\"Netherlands\"},{\"country\":\"New Caledonia\"}," +
                "{\"country\":\"New Zealand\"},{\"country\":\"Nigeria\"}," +
                "{\"country\":\"North Macedonia\"},{\"country\":\"Norway\"}," +
                "{\"country\":\"Oman\"},{\"country\":\"Pakistan\"}," +
                "{\"country\":\"Palestinian Territory\"}," +
                "{\"country\":\"Peru\"},{\"country\":\"Philippines\"},{\"country\":\"Poland\"}," +
                "{\"country\":\"Portugal\"},{\"country\":\"Puerto Rico\"},{\"country\":\"Romania\"}" +
                ",{\"country\":\"Russia\"},{\"country\":\"San Marino\"},{\"country\":\"Serbia\"}," +
                "{\"country\":\"Singapore\"},{\"country\":\"Slovakia\"},{\"country\":\"Slovenia\"}," +
                "{\"country\":\"South Africa\"},{\"country\":\"South Korea\"},{\"country\":\"Spain\"}," +
                "{\"country\":\"Sri Lanka\"},{\"country\":\"Svalbard and Jan Mayen\"},{\"country\":\"Sweden\"}," +
                "{\"country\":\"Switzerland\"},{\"country\":\"Syria\"},{\"country\":\"Taiwan\"}," +
                "{\"country\":\"Thailand\"},{\"country\":\"Turkey\"},{\"country\":\"U.S. Virgin Islands\"}," +
                "{\"country\":\"USA\"},{\"country\":\"Uganda\"},{\"country\":\"Ukraine\"}," +
                "{\"country\":\"United Arab Emirates\"},{\"country\":\"United Kingdom\"},{\"country\":\"Uzbekistan\"}," +
                "{\"country\":\"Vietnam\"},{\"country\":\"Yemen\"}]}";
        ArrayList<String> actualOutput = JsonParser.parseSupportedCountries(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());
    }

    @Test
    public void JsonParserFunction2Test(){
        String expectedOutput = "[Anhui, Beijing, Chongqing, Fujian, Gansu, Guangdong, Guangxi, Guizhou, Hainan, Hebei, Heilongjiang, Henan, Hubei, Hunan, Inner Mongolia, Jiangsu, Jiangxi, Jilin, Liaoning, Ningxia, Qinghai, Shaanxi, Shandong, Shanghai, Shanxi, Sichuan, Tianjin, Tibet, Xinjiang, Yunnan, Zhejiang]";

        String toBeParsed = "{\"status\":\"success\",\"data\":[{\"state\":\"Anhui\"},{\"state\":\"Beijing\"},{\"state\":\"Chongqing\"},{\"state\":\"Fujian\"},{\"state\":\"Gansu\"},{\"state\":\"Guangdong\"},{\"state\":\"Guangxi\"},{\"state\":\"Guizhou\"},{\"state\":\"Hainan\"},{\"state\":\"Hebei\"},{\"state\":\"Heilongjiang\"},{\"state\":\"Henan\"},{\"state\":\"Hubei\"},{\"state\":\"Hunan\"},{\"state\":\"Inner Mongolia\"},{\"state\":\"Jiangsu\"},{\"state\":\"Jiangxi\"},{\"state\":\"Jilin\"},{\"state\":\"Liaoning\"},{\"state\":\"Ningxia\"},{\"state\":\"Qinghai\"},{\"state\":\"Shaanxi\"},{\"state\":\"Shandong\"},{\"state\":\"Shanghai\"},{\"state\":\"Shanxi\"},{\"state\":\"Sichuan\"},{\"state\":\"Tianjin\"},{\"state\":\"Tibet\"},{\"state\":\"Xinjiang\"},{\"state\":\"Yunnan\"},{\"state\":\"Zhejiang\"}]}";

        ArrayList<String> actualOutput = JsonParser.parseSupportedStates(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());

    }

    @Test
    public void JsonParserFunction3Test(){
        String expectedOutput = "[Beijing, Changping, Daxing, Fangshan, Liangxiang, Mentougou, Shunyi, Tongzhou]";

        String toBeParsed = "{\"status\":\"success\",\"data\":[{\"city\":\"Beijing\"},{\"city\":\"Changping\"},{\"city\":\"Daxing\"},{\"city\":\"Fangshan\"},{\"city\":\"Liangxiang\"},{\"city\":\"Mentougou\"},{\"city\":\"Shunyi\"},{\"city\":\"Tongzhou\"}]}";

        ArrayList<String> actualOutput = JsonParser.parseSupportedCities(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());
    }

    @Test
    public void JsonParserFunction4Test(){
        String expectedOutput = "{city=Beijing, state=Beijing, country=China, location type=Point, location coordinate 0=116.462153, location coordinate 1=39.941674, current weather ts=2021-06-06T14:00:00.000Z, current weather tp=25.0, current weather pr=1006.0, current weather hu=47.0, current weather ws=3.0, current weather wd=120.0, current weather ic=10n, current pollution ts=2021-06-06T15:00:00.000Z, current pollution aqius=70.0, current pollution mainus=p2, current pollution aqicn=39.0, current pollution maincn=o3}";

        String toBeParsed = "{\"status\":\"success\",\"data\":{\"city\":\"Beijing\",\"state\":\"Beijing\",\"country\":\"China\",\"location\":{\"type\":\"Point\",\"coordinates\":[116.462153,39.941674]},\"current\":{\"weather\":{\"ts\":\"2021-06-06T14:00:00.000Z\",\"tp\":25,\"pr\":1006,\"hu\":47,\"ws\":3,\"wd\":120,\"ic\":\"10n\"},\"pollution\":{\"ts\":\"2021-06-06T15:00:00.000Z\",\"aqius\":70,\"mainus\":\"p2\",\"aqicn\":39,\"maincn\":\"o3\"}}}}";

        LinkedHashMap<String,String> actualOutput = JsonParser.parseSpecifiedCityData(toBeParsed);

        Assert.assertEquals(expectedOutput,actualOutput.toString());

    }

    @Test
    public void DatabaseFunction1Test(){

        Connection con = Database.createNewDatabase();
        Database.connectThenCreateTable(con);
        Database.insertData(con,"testing city","testing state","testing country","testing info");
        String actual =  Database.queryData(con);
        String expected = "testing city testing state testing country testing info";
        assertEquals(expected,actual);
    }

}
